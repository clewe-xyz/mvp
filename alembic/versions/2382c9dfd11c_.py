"""

Revision ID: 2382c9dfd11c
Revises: 
Create Date: 2023-05-07 10:39:19.546217

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '2382c9dfd11c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('achievement',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('tag', sa.VARCHAR(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('experience_reward', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_achievement'))
    )
    op.create_index(op.f('ix_achievement_id'), 'achievement', ['id'], unique=False)
    op.create_table('quest',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('tag', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_quest'))
    )
    op.create_index(op.f('ix_quest_id'), 'quest', ['id'], unique=False)
    op.create_table('question',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('question', sa.Text(), nullable=False),
    sa.Column('type', sa.Enum('MultipleOptions', 'SingleOption', 'OpenedText', name='questiontype'), nullable=False),
    sa.Column('answers', sa.JSON(), nullable=True),
    sa.Column('experience_reward', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_question'))
    )
    op.create_index(op.f('ix_question_id'), 'question', ['id'], unique=False)
    op.create_table('skill',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('topic', sa.VARCHAR(length=255), nullable=True),
    sa.Column('tag', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_skill'))
    )
    op.create_index(op.f('ix_skill_id'), 'skill', ['id'], unique=False)
    op.create_table('usertable',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nickname', sa.VARCHAR(length=255), nullable=True),
    sa.Column('wallet_address', sa.VARCHAR(length=255), nullable=True),
    sa.Column('level', sa.Integer(), nullable=True),
    sa.Column('level_total_exp', sa.Integer(), nullable=True),
    sa.Column('exp_to_next_level', sa.Integer(), nullable=True),
    sa.Column('email', sa.VARCHAR(length=128), nullable=True),
    sa.Column('password', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_usertable'))
    )
    op.create_index(op.f('ix_usertable_email'), 'usertable', ['email'], unique=True)
    op.create_index(op.f('ix_usertable_id'), 'usertable', ['id'], unique=False)
    op.create_table('questionsskills',
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('skill_id', sa.Integer(), nullable=False),
    sa.Column('point', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['question.id'], name=op.f('fk_questionsskills_question_id_question')),
    sa.ForeignKeyConstraint(['skill_id'], ['skill.id'], name=op.f('fk_questionsskills_skill_id_skill')),
    sa.PrimaryKeyConstraint('question_id', 'skill_id', name=op.f('pk_questionsskills'))
    )
    op.create_table('questsquestions',
    sa.Column('quest_id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['quest_id'], ['quest.id'], name=op.f('fk_questsquestions_quest_id_quest')),
    sa.ForeignKeyConstraint(['question_id'], ['question.id'], name=op.f('fk_questsquestions_question_id_question')),
    sa.PrimaryKeyConstraint('quest_id', 'question_id', name=op.f('pk_questsquestions'))
    )
    op.create_table('usersachievements',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('achievement_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievement.id'], name=op.f('fk_usersachievements_achievement_id_achievement')),
    sa.ForeignKeyConstraint(['user_id'], ['usertable.id'], name=op.f('fk_usersachievements_user_id_usertable')),
    sa.PrimaryKeyConstraint('user_id', 'achievement_id', name=op.f('pk_usersachievements'))
    )
    op.create_table('usersquests',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('quest_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['quest_id'], ['quest.id'], name=op.f('fk_usersquests_quest_id_quest')),
    sa.ForeignKeyConstraint(['user_id'], ['usertable.id'], name=op.f('fk_usersquests_user_id_usertable')),
    sa.PrimaryKeyConstraint('user_id', 'quest_id', name=op.f('pk_usersquests'))
    )
    op.create_table('usersskills',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('skill_id', sa.Integer(), nullable=False),
    sa.Column('point', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['skill_id'], ['skill.id'], name=op.f('fk_usersskills_skill_id_skill')),
    sa.ForeignKeyConstraint(['user_id'], ['usertable.id'], name=op.f('fk_usersskills_user_id_usertable')),
    sa.PrimaryKeyConstraint('user_id', 'skill_id', name=op.f('pk_usersskills'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('usersskills')
    op.drop_table('usersquests')
    op.drop_table('usersachievements')
    op.drop_table('questsquestions')
    op.drop_table('questionsskills')
    op.drop_index(op.f('ix_usertable_id'), table_name='usertable')
    op.drop_index(op.f('ix_usertable_email'), table_name='usertable')
    op.drop_table('usertable')
    op.drop_index(op.f('ix_skill_id'), table_name='skill')
    op.drop_table('skill')
    op.drop_index(op.f('ix_question_id'), table_name='question')
    op.drop_table('question')
    op.drop_index(op.f('ix_quest_id'), table_name='quest')
    op.drop_table('quest')
    op.drop_index(op.f('ix_achievement_id'), table_name='achievement')
    op.drop_table('achievement')
    # ### end Alembic commands ###
